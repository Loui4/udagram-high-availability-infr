Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: udagram high availability infr
    Type: String

  myLaunchTemplateVersionNumber:
    Description: launchTemplateVersion
    Type: Number
    Default: 1

  SSHKeyName:
    Description: ssh key name
    Type: String

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  ServerSG:
    Description: server security group
    Type: String

  SubnetOneCIDR:
    Description: CIDR block for subnet 1
    Type: String
    Default: 10.0.1.0/24

  SubnetTwoCIDR:
    Description: CIDR block for subnet 1
    Type: String
    Default: 10.0.1.0/24

Resources:
  # instance profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateWayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - InternetGateway
      - VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  SubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref SubnetOneCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} subnet one

  SubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref SubnetTwoCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} subnet two
  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - AssignmentOneS3ReadOnlyEC2

  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-06878d265978313ca
        InstanceType: t3.small
        KeyName: !Ref SSHKeyName
        # IamInstanceProfile:
        #   Arn: !GetAtt
        #     - ProfileWithRolesForOurApp
        SecurityGroups:
          - Ref: LBSecGroup
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: 10
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "Udacity Demo Web Server Up and Running!" > index.html

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - SubnetOne
      - SubnetTwo
    Properties:
      VPCZoneIdentifier:
        - !Join [",", [!Ref SubnetOne, !Ref SubnetTwo]]
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !Ref myLaunchTemplateVersionNumber
      MinSize: "3"
      MaxSize: "5"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: VPC
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Allow public http access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 6523
          CidrIp: 0.0.0.0/0

  Assignmentlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - SubnetOne
      - SubnetTwo
    Properties:
      Subnets:
        - !Ref SubnetOne
        - !Ref SubnetTwo
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: Assignmentlb
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1
Outputs:
  VPC:
    Description: a reference to vpc id
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID
  SubnetOne:
    Description: a reference to subnet one
    Value: !Ref SubnetOne
    Export:
      Name: !Sub ${EnvironmentName}-PUB1-SN
  SubnetTwo:
    Description: a reference to subnet two
    Value: !Ref SubnetTwo
    Export:
      Name: !Sub ${EnvironmentName}-PUB2-SN
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref SubnetOne, !Ref SubnetTwo]]
    Export:
      Name: !Sub ${EnvironmentName}-PUB-NETS
# This is also optional.
# Bonus points for useful outputs!
# for example, if you create a Load Balancer
# it's nice to output the URL to it here, so that we don't have to go to the console to get it.
# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:

#  #!/bin/bash
#  apt-get update -y
#  apt-get install apache2 -y
#  systemctl start apache2.service
#  cd /var/www/html
#  echo "Udacity Demo Web Server Up and Running!" > index.html
